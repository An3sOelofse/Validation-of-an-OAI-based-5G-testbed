Active_gNBs = ( "gNB-Telenet");

Asn1_verbosity = "none"; # Asn1_verbosity, choice in: none, info, annoying

gNBs = ({
    ////////// Identification parameters:
    gNB_ID    =  0xe00;
    gNB_name  =  "gNB-Telenet";

    // Tracking area code, 0x0000 and 0xfffe are reserved values
    tracking_area_code  =  1;
    plmn_list = ({ mcc = 999; mnc = 70; mnc_length = 2; snssaiList = ({ sst = 1, sd = 0xffffff }) });

    nr_cellid = 12345678L;

    ////////// Physical parameters:

    do_CSIRS  = 1;
    do_SRS    = 1;

    servingCellConfigCommon = ({

      #Common Config
      physCellId = 0;

      dl_frequencyBand = 78; # chosen from a set of predefined bands in the 5G standard
      ul_frequencyBand = 78; #ul and dl same for TDD

      subcarrierSpacing = 1; # 0=kHz15, 1=kHz30, 2=kHz60, 3=kHz120
      referenceSubcarrierSpacing = 1;
      dl_subcarrierSpacing = 1; 
      ul_subcarrierSpacing = 1; # ul and dl same for TDD

      dl_carrierBandwidth = 51; # number of PRBs (Physical Resource Blocks) This affects the bandwidth (51 PRB @ SCS 13 kHz = 20MHz)
      ul_carrierBandwidth = 51; # ul and dl same for TDD

      dl_offstToCarrier  = 0; # Defines where PRBs begin 
      ul_offstToCarrier  = 0; # ul and dl same for TDD

      pMax = 20; # maximum ue transmit power in dbm (-30 - 33)


      #Resource Grid configs
      dl_absoluteFrequencyPointA = 639388; # ul freq point A is automatically the same when TDD is selected

      #SSB
      absoluteFrequencySSB = 639936; # location of SSB. This is defined as a NR-ARFCN, but needs to be part of the GSCN raster
      ssb_periodicityServingCell = 2; #This is how regularly the ssb is sent out # 0 = ms5, 1=ms10, 2=ms20, 3=ms40, 4=ms80, 5=ms160, 6=spare2, 7=spare1
      ssb_PositionsInBurst_Bitmap = 1;  #When using beamforming, multiple ssbs are sent with different beam directions. This value maps to a string of bits where 1 means that the ssb is active and 0 that it is inactive in the burst eg (10001000)
      ssPBCH_BlockPower = -25; #default -25 #(-60 - 50) Average EPRE of the resources elements that carry secondary synchronization signals in dBm that the NW used for SSB transmission, see TS 38.213 [13], clause 7.
      
      #initialBWP
      initialDLBWPlocationAndBandwidth = 13750; # This value is a RIV number and defines where the RB start and how many there are (locationAndBandwidth full : 13750 (start : 0, #RBs : 51))
      initialULBWPlocationAndBandwidth = 13750; # ul and downlink same for TDD

      initialDLBWPsubcarrierSpacing = 1; # 0=kHz15, 1=kHz30, 2=kHz60, 3=kHz120
      initialULBWPsubcarrierSpacing = 1; # ul and downlink same for TDD

      initialDLBWPcontrolResourceSetZero = 10; #This is an index number indicating what configuration is used from a the dropdown we used (index 0 (24RBs offset: 0))
      initialDLBWPsearchSpaceZero = 0; #?
  
      # pattern test
      # dl_UL_TransmissionPeriodicity
      # 0=ms0p5, 1=ms0p625, 2=ms1, 3=ms1p25, 4=ms2, 5=ms2p5, 6=ms5, 7=ms10
      dl_UL_TransmissionPeriodicity                                 = 6;
      nrofDownlinkSlots                                             = 5;
      nrofDownlinkSymbols                                           = 4;
      nrofUplinkSlots                                               = 4;
      nrofUplinkSymbols                                             = 6;



      #Random Access Channel
        
      #rach-ConfigCommon

      prach_ConfigurationIndex = 98;#98;#109;#106; #(0 - 255) beyond my scope (default 98)79

      #rach-ConfigGeneric
      
      #prach_msg1_FDM

      prach_msg1_FDM                                            = 0; #0 = one, 1=two, 2=four, 3=eight
      prach_msg1_FrequencyStart                                 = 0;
      zeroCorrelationZoneConfig                                 = 13;
      preambleReceivedTargetPower                               = -96;

      preambleTransMax = 6; #(0...10) = (3,4,5,6,7,8,10,20,50,100,200) Max number of RA preamble transmission performed before declaring a failure listed in TS 38.331 section 6.3.2
      
      powerRampingStep = 1;  # 0=dB0,1=dB2,2=dB4,3=dB6

      ra_ResponseWindow = 6; #10ms defualt #(0...7) = 1,2,4,8,10,20,40,80 #set to 20ms for different slot formats

      #ssb_perRACH_OccasionAndCB_PreamblesPerSSB_PR
      ssb_perRACH_OccasionAndCB_PreamblesPerSSB_PR = 4; #1=oneeighth,2=onefourth,3=half,4=one,5=two,6=four,7=eight,8=sixteen
      ssb_perRACH_OccasionAndCB_PreamblesPerSSB = 14; #oneHalf (0..15) 4,8,12,16,...60,64
        
      #ra_ContentionResolutionTimer
      ra_ContentionResolutionTimer = 7; #(0..7) 8,16,24,32,40,48,56,64
      rsrp_ThresholdSSB = 19;
      #prach-RootSequenceIndex_PR

      prach_RootSequenceIndex_PR = 2; #1 = 839, 2 = 139
      prach_RootSequenceIndex = 1;
      
      #
      msg1_SubcarrierSpacing = 1, # SCS for msg1, can only be 15 for 30 kHz < 6 GHz, takes precendence over the one derived from prach-ConfigIndex

      # restrictedSetConfig
      restrictedSetConfig                                         = 0,# 0=unrestricted, 1=restricted type A, 2=restricted type B

      msg3_DeltaPreamble                                          = 1;
      p0_NominalWithGrant                                         =-90;

      # pucch-ConfigCommon setup :
      # pucchGroupHopping
      # 0 = neither, 1= group hopping, 2=sequence hopping
      pucchGroupHopping                                           = 0;
      hoppingId                                                   = 40;
      p0_nominal                                                  = -90;

      

      dmrs_TypeA_Position                                           = 0; # 0 = pos2, 1 = pos3

  }

);


    # ------- SCTP definitions
    SCTP :
    {
        # Number of streams to use in input/output
        SCTP_INSTREAMS  = 2;
        SCTP_OUTSTREAMS = 2;
    };


    ////////// AMF parameters:
    amf_ip_address = ({ ipv4 = "192.168.70.132"; });


    NETWORK_INTERFACES :
    {
        GNB_IPV4_ADDRESS_FOR_NG_AMF              = "192.168.70.129/24";
        GNB_IPV4_ADDRESS_FOR_NGU                 = "192.168.70.129/24";
        GNB_PORT_FOR_S1U                         = 2152; # Spec 2152
    };

  }
);

MACRLCs = (
{
  num_cc                      = 1;
  tr_s_preference             = "local_L1";
  tr_n_preference             = "local_RRC";
  pusch_TargetSNRx10          = 150; ### default 150
  pucch_TargetSNRx10          = 200; ### default 200
  do_CSIRS                    = 1;                #### added to help with channel state information
  dl_max_mcs                  = 28;               ####ensureing max mcs is used (default is supposedly 28 but not what is seen while operating)
  ul_max_mcs                  = 28;
  force_UL256qam_off          = 0; ### default 0 = false

  dl_bler_target_upper        = 0.15;  #### default 0.15 but increasing it will lean more towards higher mcs
  dl_bler_target_lower        = 0.05;  #### default 0.05 but increasing it will lean more towards higher mcs
  ul_bler_target_upper        = 0.15;  #### default 0.15 but increasing it will lean more towards higher mcs
  ul_bler_target_lower        = 0.05;  #### default 0.05 but increasing it will lean more towards higher mcs
}
);

L1s = (
{
  num_cc = 1;
  tr_n_preference       = "local_mac";
  prach_dtx_threshold   = 120;
  pucch0_dtx_threshold  = 100;
  ofdm_offset_divisor   = 8; #set this to UINT_MAX for offset 0
}
);

RUs = (
{
  local_rf       = "yes"
  nb_tx          = 1
  nb_rx          = 1
  att_tx         = 0;
  att_rx         = 0;
  bands          = [78];
  max_pdschReferenceSignalPower = -27; #default -27
  max_rxgain                    = 114;
  eNB_instances  = [0];
  clock_src = "external";
  time_src = "external"
}
);

security = {
  # preferred ciphering algorithms
  # the first one of the list that an UE supports in chosen
  # valid values: nea0, nea1, nea2, nea3
  ciphering_algorithms = ( "nea0" );

  # preferred integrity algorithms
  # the first one of the list that an UE supports in chosen
  # valid values: nia0, nia1, nia2, nia3
  integrity_algorithms = ( "nia2", "nia0" );

  # setting 'drb_ciphering' to "no" disables ciphering for DRBs, no matter
  # what 'ciphering_algorithms' configures; same thing for 'drb_integrity'
  drb_ciphering = "yes";
  drb_integrity = "no";
};

log_config :
{
  global_log_level                      ="info";
  hw_log_level                          ="info";
  phy_log_level                         ="info";
  mac_log_level                         ="info";
  rlc_log_level                         ="info";
  pdcp_log_level                        ="info";
  rrc_log_level                         ="info";
  ngap_log_level                        ="info";
  f1ap_log_level                        ="info";
};
